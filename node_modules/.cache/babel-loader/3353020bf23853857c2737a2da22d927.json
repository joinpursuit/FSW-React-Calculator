{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/App.js\";\nimport 'css-doodle';\nimport './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation';\nimport Calculator from './components/Calculator';\nimport formatter from './helpers/formatter';\nimport data from './helpers/data';\nimport { create, all } from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: [],\n      evaluate: [],\n      numbers: [],\n      result: 0,\n      prevNums: [],\n      prevRes: 0\n    };\n    this.isClicked = this.isClicked.bind(this);\n  }\n\n  isClicked(value, className, number) {\n    if (isNaN(number)) {\n      const isClass = className.split(' '); //console.log(isClass)\n\n      switch (isClass[1]) {\n        //    27 n\n        case 'result':\n          {\n            // 9 * 3 = 27\n            const doMath = math.evaluate(this.state.evaluate.join('').trim());\n            const numArray = String(doMath).split('').map(doMath => {\n              return Number(doMath);\n            });\n            this.setState({\n              numbers: [formatter(numArray)],\n              result: doMath,\n              evaluate: [...this.state.evaluate, ' = ', this.state.result]\n            });\n            break;\n          }\n\n        case 'ac':\n          {\n            this.setState({\n              display: [],\n              evaluate: [],\n              numbers: [],\n              result: 0\n            });\n            break;\n          }\n\n        case 'neg':\n          {\n            const doMath = math.evaluate(this.state.evaluate.join('').trim().concat(\"*(-1)\"));\n            console.log('negative');\n            console.log(doMath); //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n\n            this.setState({\n              numbers: [doMath],\n              evaluate: [doMath],\n              result: doMath\n            });\n            break;\n          }\n\n        case 'sq':\n          {\n            const doMath = math.evaluate(this.state.evaluate.join('').trim().concat(\"^2\"));\n            console.log('square');\n            console.log(doMath); //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n\n            this.setState({\n              numbers: [doMath],\n              evaluate: [doMath],\n              result: doMath\n            });\n            break;\n          }\n\n        case 'sqrt':\n          {\n            const doMath = math.sqrt(this.state.result);\n            console.log('squarerRoot');\n            console.log(doMath); //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n\n            this.setState({\n              numbers: [doMath],\n              evaluate: [doMath],\n              result: doMath\n            });\n            break;\n          }\n\n        case 'percentage':\n          {\n            const doMath = math.multiply(this.state.result, 0.1);\n            console.log('Percentage');\n            console.log(doMath); //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n\n            this.setState({\n              numbers: [doMath],\n              evaluate: [doMath],\n              result: doMath\n            });\n            break;\n          }\n\n        case 'pi':\n          {\n            this.setState({\n              numbers: [math.pi],\n              evaluate: [math.pi],\n              result: math.pi\n            });\n            break;\n          }\n\n        case 'pow':\n          {\n            this.setState({\n              numbers: [],\n              evaluate: [...this.state.evaluate, ' ', value, ' ']\n            });\n            break;\n          }\n\n        default:\n          {\n            this.setState({\n              numbers: [],\n              evaluate: [...this.state.evaluate, ' ', value, ' ']\n            });\n            break;\n          }\n      }\n    } else {\n      this.setState({\n        numbers: [...this.state.numbers, number],\n        evaluate: [...this.state.evaluate, number],\n        result: number\n      });\n    }\n  }\n\n  render() {\n    const skeleton = data;\n    const numbers = this.state.numbers;\n    const evaluate = this.state.evaluate;\n    const format = formatter;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n        skeleton: skeleton,\n        isClicked: this.isClicked,\n        numbers: numbers,\n        evaluate: evaluate,\n        format: format\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/App.js"],"names":["React","Navigation","Calculator","formatter","data","create","all","config","math","App","Component","constructor","props","state","display","evaluate","numbers","result","prevNums","prevRes","isClicked","bind","value","className","number","isNaN","isClass","split","doMath","join","trim","numArray","String","map","Number","setState","concat","console","log","sqrt","multiply","pi","render","skeleton","format"],"mappings":"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","sourcesContent":["import 'css-doodle'\nimport './App.css'\nimport React from 'react'\nimport Navigation from './components/Navigation'\nimport Calculator from './components/Calculator'\nimport formatter from './helpers/formatter'\n\nimport data from './helpers/data'\nimport { create, all } from 'mathjs'\n\nconst config = { }\nconst math = create(all, config)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: [],\n      evaluate: [],\n      numbers:[],\n      result: 0,\n      prevNums: [],\n      prevRes: 0\n    }\n\n    this.isClicked = this.isClicked.bind(this)\n  }\n  \n  isClicked(value,className,number) {\n    if (isNaN(number)) {\n      const isClass = className.split(' ')\n      //console.log(isClass)\n      switch(isClass[1]){\n                                      //    27 n\n        case 'result': {              // 9 * 3 = 27\n                        const doMath = math.evaluate(this.state.evaluate.join('').trim());\n                        const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n                        this.setState({\n                            numbers:[formatter(numArray)],\n                            result: doMath,\n                            evaluate:[...this.state.evaluate,' = ',this.state.result],\n                            });\n                        break;\n                        }\n        case 'ac' : {\n                        this.setState({\n                            display: [],\n                            evaluate: [],\n                            numbers:[],\n                            result: 0 \n                        });\n                        break;\n                    }\n        case 'neg' : {\n\n                        const doMath = math.evaluate(this.state.evaluate.join('').trim().concat(\"*(-1)\"));\n                        console.log('negative')\n                        console.log(doMath)\n                        //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n                        this.setState({\n                        numbers:[doMath],\n                        evaluate:[doMath],\n                        result: doMath\n                        });break;\n                  }  \n\n          case 'sq' : {\n\n                    const doMath = math.evaluate(this.state.evaluate.join('').trim().concat(\"^2\"));\n                    console.log('square')\n                    console.log(doMath)\n                    //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n                    this.setState({\n                    numbers:[doMath],\n                    evaluate:[doMath],\n                    result: doMath\n                    });break;\n              } \n          case 'sqrt' : {\n\n                const doMath = math.sqrt(this.state.result);\n                console.log('squarerRoot')\n                console.log(doMath)\n                //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n                this.setState({\n                numbers:[doMath],\n                evaluate:[doMath],\n                result: doMath\n                });break;\n          }   \n          case 'percentage' : {\n\n            const doMath = math.multiply(this.state.result,0.1);\n            console.log('Percentage')\n            console.log(doMath)\n            //const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n            this.setState({\n            numbers:[doMath],\n            evaluate:[doMath],\n            result: doMath\n            });break;\n      } \n      case 'pi' : {\n\n        this.setState({\n        numbers:[math.pi],\n        evaluate:[math.pi],\n        result: math.pi\n        });break;\n  } \n  case 'pow' : {\n\n    this.setState({\n      numbers:[],\n      evaluate:[...this.state.evaluate,' ',value,' ']\n      });\n      break;\n} \n\n        default :   {\n                        this.setState({\n                        numbers:[],\n                        evaluate:[...this.state.evaluate,' ',value,' ']\n                        });\n                        break;\n                    }       \n    }\n\n\n\n    }else{\n      this.setState({\n        numbers:[...this.state.numbers,number],\n        evaluate:[...this.state.evaluate,number],\n        result: number\n      })\n    }\n  }\n\n  render() {\n    const skeleton = data\n    const numbers = this.state.numbers\n    const evaluate  = this.state.evaluate\n    const format = formatter\n    return (\n      <>\n      <Navigation />\n      <Calculator skeleton={skeleton} isClicked={this.isClicked} numbers={numbers} evaluate={evaluate} format={format}/>\n    </>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}