{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      format = _ref.format;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize: wordSize\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/node_modules/mathjs/lib/esm/function/string/oct.js"],"names":["factory","name","dependencies","createOct","_ref","typed","format","numberBigNumber","n","notation","numberBigNumberNumber","wordSize"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,SAAS,GAAGH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAACE,IAAD,EAAU;AAAA,MAEzDC,KAFyD,GAIvDD,IAJuD,CAEzDC,KAFyD;AAAA,MAGzDC,MAHyD,GAIvDF,IAJuD,CAGzDE,MAHyD;AAK3D,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,0BAAsB,SAASM,eAAT,CAAyBC,CAAzB,EAA4B;AAChD,aAAOF,MAAM,CAACE,CAAD,EAAI;AACfC,QAAAA,QAAQ,EAAE;AADK,OAAJ,CAAb;AAGD,KALgB;AAMjB,kCAA8B,SAASC,qBAAT,CAA+BF,CAA/B,EAAkCG,QAAlC,EAA4C;AACxE,aAAOL,MAAM,CAACE,CAAD,EAAI;AACfC,QAAAA,QAAQ,EAAE,KADK;AAEfE,QAAAA,QAAQ,EAAEA;AAFK,OAAJ,CAAb;AAID;AAXgB,GAAP,CAAZ;AAaD,CAlB6B,CAAvB","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'oct';\nvar dependencies = ['typed', 'format'];\n/**\n * Format a number as octal.\n *\n * Syntax:\n *\n *    math.oct(value)\n *\n * Examples:\n *\n *    //the following outputs \"0o70\"\n *    math.oct(56)\n *\n * See also:\n *\n *    bin\n *    hex\n *\n * @param {number} value    Value to be stringified\n * @param {number} wordSize Optional word size (see `format`)\n * @return {string}         The formatted value\n */\n\nexport var createOct = factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    format\n  } = _ref;\n  return typed(name, {\n    'number | BigNumber': function numberBigNumber(n) {\n      return format(n, {\n        notation: 'oct'\n      });\n    },\n    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {\n      return format(n, {\n        notation: 'oct',\n        wordSize: wordSize\n      });\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}