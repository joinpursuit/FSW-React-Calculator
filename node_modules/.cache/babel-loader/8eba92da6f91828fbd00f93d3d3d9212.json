{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/node_modules/mathjs/lib/esm/function/probability/multinomial.js"],"names":["deepForEach","factory","name","dependencies","createMultinomial","_ref","typed","add","divide","multiply","factorial","isInteger","isPositive","ArrayMatrix","a","sum","denom","ai","TypeError"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,EAAoD,WAApD,EAAiE,YAAjE,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAACE,IAAD,EAAU;AAAA,MAEhFC,KAFgF,GAS9ED,IAT8E,CAEhFC,KAFgF;AAAA,MAGhFC,GAHgF,GAS9EF,IAT8E,CAGhFE,GAHgF;AAAA,MAIhFC,MAJgF,GAS9EH,IAT8E,CAIhFG,MAJgF;AAAA,MAKhFC,QALgF,GAS9EJ,IAT8E,CAKhFI,QALgF;AAAA,MAMhFC,SANgF,GAS9EL,IAT8E,CAMhFK,SANgF;AAAA,MAOhFC,SAPgF,GAS9EN,IAT8E,CAOhFM,SAPgF;AAAA,MAQhFC,UARgF,GAS9EP,IAT8E,CAQhFO,UARgF;AAWlF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAON,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASW,WAAT,CAAqBC,CAArB,EAAwB;AACxC,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIC,KAAK,GAAG,CAAZ;AACAhB,MAAAA,WAAW,CAACc,CAAD,EAAI,UAAUG,EAAV,EAAc;AAC3B,YAAI,CAACN,SAAS,CAACM,EAAD,CAAV,IAAkB,CAACL,UAAU,CAACK,EAAD,CAAjC,EAAuC;AACrC,gBAAM,IAAIC,SAAJ,CAAc,yDAAd,CAAN;AACD;;AAEDH,QAAAA,GAAG,GAAGR,GAAG,CAACQ,GAAD,EAAME,EAAN,CAAT;AACAD,QAAAA,KAAK,GAAGP,QAAQ,CAACO,KAAD,EAAQN,SAAS,CAACO,EAAD,CAAjB,CAAhB;AACD,OAPU,CAAX;AAQA,aAAOT,MAAM,CAACE,SAAS,CAACK,GAAD,CAAV,EAAiBC,KAAjB,CAAb;AACD;AAbgB,GAAP,CAAZ;AAeD,CA/CoD,CAA9C","sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    add,\n    divide,\n    multiply,\n    factorial,\n    isInteger,\n    isPositive\n  } = _ref;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}