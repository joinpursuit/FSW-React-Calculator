{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/components/Display.js\";\n// import React from 'react'\n// function Display (props) {\n//   const { display, evaluate, number, result, deleted } = props\n//   let formatted, formattedInfix = \"\"\n//   console.log('NUMBER DISPLAY COMPONENT')\n//   console.log(number)\n//   let infix = (deleted) ? display : evaluate;\n//   console.log(\"INFIX DISPLAY COM\")\n//   console.log(infix.toLocaleString())\n//   formattedInfix = (isNaN(parseFloat(infix))) ? 0 : parseFloat(infix).toLocaleString()\n//   console.log(\"FORMATTED INFIX DISPLAY COM\")\n//   console.log(formattedInfix)\n//     if(result !=\"\" && display===result){\n//       formatted = parseFloat(result).toLocaleString()\n//       console.log(`FORMATTED : ${formatted}`)\n//     }else{\n//       formatted = (isNaN(parseFloat(number))) ? 0 : parseFloat(number).toLocaleString()\n//     }\n//   return (\n//     <div className='display glass'>\n//       {formatted}\n//       <div className='preview'>{(isNaN(parseFloat(formattedInfix))) ? evaluate : formattedInfix }</div>\n//     </div>\n//   )\n// }\n// export default Display\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display(props) {\n  const {\n    display,\n    evaluate,\n    number,\n    result,\n    deleted\n  } = props;\n  let formatted = \"\";\n  let infix = deleted ? display : evaluate;\n\n  if (result != \"\" && display === result) {\n    formatted = parseFloat(result).toLocaleString();\n    console.log(`FORMATTED : ${formatted}`);\n  } else {\n    formatted = isNaN(parseFloat(number)) ? 0 : parseFloat(number).toLocaleString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display glass\",\n    children: [formatted || '0', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview\",\n      children: infix.trim().toLocaleString() || '0'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/components/Display.js"],"names":["React","Display","props","display","evaluate","number","result","deleted","formatted","infix","parseFloat","toLocaleString","console","log","isNaN","trim"],"mappings":";AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,MAA7B;AAAqCC,IAAAA;AAArC,MAAiDL,KAAvD;AACA,MAAIM,SAAS,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAIF,OAAD,GAAYJ,OAAZ,GAAsBC,QAAlC;;AAEE,MAAGE,MAAM,IAAG,EAAT,IAAeH,OAAO,KAAGG,MAA5B,EAAmC;AACjCE,IAAAA,SAAS,GAAGE,UAAU,CAACJ,MAAD,CAAV,CAAmBK,cAAnB,EAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAcL,SAAU,EAArC;AAED,GAJD,MAIK;AAEHA,IAAAA,SAAS,GAAIM,KAAK,CAACJ,UAAU,CAACL,MAAD,CAAX,CAAN,GAA8B,CAA9B,GAAkCK,UAAU,CAACL,MAAD,CAAV,CAAmBM,cAAnB,EAA9C;AAED;;AAEH,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,eACGH,SAAS,IAAI,GADhB,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA0BC,KAAK,CAACM,IAAN,GAAaJ,cAAb,MAAiC;AAA3D;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KArBQV,O;AAuBT,eAAeA,OAAf","sourcesContent":["// import React from 'react'\n\n// function Display (props) {\n//   const { display, evaluate, number, result, deleted } = props\n//   let formatted, formattedInfix = \"\"\n  \n//   console.log('NUMBER DISPLAY COMPONENT')\n//   console.log(number)\n//   let infix = (deleted) ? display : evaluate;\n//   console.log(\"INFIX DISPLAY COM\")\n//   console.log(infix.toLocaleString())\n\n//   formattedInfix = (isNaN(parseFloat(infix))) ? 0 : parseFloat(infix).toLocaleString()\n\n//   console.log(\"FORMATTED INFIX DISPLAY COM\")\n//   console.log(formattedInfix)\n\n//     if(result !=\"\" && display===result){\n//       formatted = parseFloat(result).toLocaleString()\n//       console.log(`FORMATTED : ${formatted}`)\n\n//     }else{\n\n//       formatted = (isNaN(parseFloat(number))) ? 0 : parseFloat(number).toLocaleString()\n      \n//     }\n \n//   return (\n//     <div className='display glass'>\n//       {formatted}\n//       <div className='preview'>{(isNaN(parseFloat(formattedInfix))) ? evaluate : formattedInfix }</div>\n//     </div>\n//   )\n// }\n\n// export default Display\n\n\n\nimport React from 'react'\n\nfunction Display (props) {\n  const { display, evaluate, number, result, deleted } = props\n  let formatted = \"\"\n  let infix = (deleted) ? display : evaluate;\n\n    if(result !=\"\" && display===result){\n      formatted = parseFloat(result).toLocaleString()\n      console.log(`FORMATTED : ${formatted}`)\n\n    }else{\n\n      formatted = (isNaN(parseFloat(number))) ? 0 : parseFloat(number).toLocaleString()\n      \n    }\n \n  return (\n    <div className='display glass'>\n      {formatted || '0'}\n      <div className='preview'>{infix.trim().toLocaleString() || '0'}</div>\n    </div>\n  )\n}\n\nexport default Display\n"]},"metadata":{},"sourceType":"module"}