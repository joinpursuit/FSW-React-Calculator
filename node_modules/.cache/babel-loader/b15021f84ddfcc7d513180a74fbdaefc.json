{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/node_modules/mathjs/lib/esm/function/set/setDistinct.js"],"names":["flatten","factory","name","dependencies","createSetDistinct","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrix","a","result","b","Array","isArray","toArray","sort","push","i","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,aAAvD,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAACE,IAAD,EAAU;AAAA,MAEhFC,KAFgF,GAQ9ED,IAR8E,CAEhFC,KAFgF;AAAA,MAGhFC,IAHgF,GAQ9EF,IAR8E,CAGhFE,IAHgF;AAAA,MAIhFC,MAJgF,GAQ9EH,IAR8E,CAIhFG,MAJgF;AAAA,MAKhFC,cALgF,GAQ9EJ,IAR8E,CAKhFI,cALgF;AAAA,MAMhFC,KANgF,GAQ9EL,IAR8E,CAMhFK,KANgF;AAAA,MAOhFC,WAPgF,GAQ9EN,IAR8E,CAOhFM,WAPgF;AAUlF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOL,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASU,WAAT,CAAqBC,CAArB,EAAwB;AACxC,UAAIC,MAAJ;;AAEA,UAAIN,MAAM,CAACD,IAAI,CAACM,CAAD,CAAL,EAAU,IAAIH,KAAJ,CAAU,CAAV,CAAV,CAAN,KAAkC,CAAtC,EAAyC;AACvC;AACAI,QAAAA,MAAM,GAAG,EAAT;AACD,OAHD,MAGO;AACL,YAAIC,CAAC,GAAGf,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAnB,GAAuBA,CAAC,CAACK,OAAF,EAAxB,CAAP,CAA4CC,IAA5C,CAAiDV,cAAjD,CAAR;AACAK,QAAAA,MAAM,GAAG,EAAT;AACAA,QAAAA,MAAM,CAACM,IAAP,CAAYL,CAAC,CAAC,CAAD,CAAb;;AAEA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,CAAC,CAACO,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,cAAIZ,cAAc,CAACM,CAAC,CAACM,CAAD,CAAF,EAAON,CAAC,CAACM,CAAC,GAAG,CAAL,CAAR,CAAd,KAAmC,CAAvC,EAA0C;AACxCP,YAAAA,MAAM,CAACM,IAAP,CAAYL,CAAC,CAACM,CAAD,CAAb;AACD;AACF;AACF,OAhBuC,CAgBtC;;;AAGF,UAAIL,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,eAAOC,MAAP;AACD,OArBuC,CAqBtC;;;AAGF,aAAO,IAAIH,WAAJ,CAAgBG,MAAhB,CAAP;AACD;AA1BgB,GAAP,CAAZ;AA4BD,CAzDoD,CAA9C","sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}