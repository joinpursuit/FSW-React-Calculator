{"ast":null,"code":"const operation = (input, type, number) => {\n  let toEval = \"\";\n  console.log(\"input\", input);\n  console.log(\"type\", type);\n  console.log(\"number\", number);\n  const whichType = type;\n\n  if (type === \"geo\") {\n    switch (input) {\n      case \"sin\":\n        toEval = `sin(${number} deg)`;\n        break;\n\n      case \"cos\":\n        toEval = `cos(${number} deg)`;\n        break;\n\n      case \"tan\":\n        toEval = `tan(${number} deg)`;\n        break;\n\n      default:\n        break;\n    }\n  } else if (type === \"operator\") {\n    switch (input) {\n      case \"/\":\n        toEval = `sin(${number} deg)`;\n        break;\n\n      case \"*\":\n        toEval = `cos(${number} deg)`;\n        break;\n\n      case \"-\":\n        toEval = `tan(${number} deg)`;\n        break;\n\n      case \"+\":\n        toEval = `tan(${number} deg)`;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  switch (whichType) {\n    case \"square\":\n      toEval = `${number}^2`;\n      break;\n\n    case \"pow\":\n      toEval = `${number}^`;\n      break;\n\n    case \"sqrt\":\n      toEval = `${number}^1/2`;\n      break;\n\n    case \"pi\":\n      toEval = `pi`;\n      break;\n\n    case \"exp\":\n      toEval = `${number}*(`;\n      break;\n\n    case \"factorial\":\n      toEval = `${number}!`;\n      break;\n\n    case \"percent\":\n      toEval = `${number}*1/100`;\n      break;\n\n    case \"allClear\":\n      break;\n\n    case \"neg\":\n      toEval = `${number}*(-1)`;\n      break;\n\n    case \"delete\":\n      break;\n\n    case \"result\":\n      break;\n\n    default:\n      break;\n  }\n\n  return toEval;\n};\n\nexport default operation;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/operation.js"],"names":["operation","input","type","number","toEval","console","log","whichType"],"mappings":"AAAA,MAAMA,SAAS,GAAC,CAACC,KAAD,EAAOC,IAAP,EAAYC,MAAZ,KAAqB;AACjC,MAAIC,MAAM,GAAG,EAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBJ,IAAnB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AAEA,QAAMI,SAAS,GAAGL,IAAlB;;AAEA,MAAGA,IAAI,KAAK,KAAZ,EAAkB;AACd,YAAOD,KAAP;AACI,WAAK,KAAL;AAAaG,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC5C,WAAK,KAAL;AAAaC,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC5C,WAAK,KAAL;AAAaC,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC5C;AAAS;AAJb;AAMH,GAPD,MAOM,IAAGD,IAAI,KAAK,UAAZ,EAAuB;AACzB,YAAOD,KAAP;AACI,WAAK,GAAL;AAAWG,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC1C,WAAK,GAAL;AAAWC,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC1C,WAAK,GAAL;AAAWC,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC1C,WAAK,GAAL;AAAWC,QAAAA,MAAM,GAAI,OAAMD,MAAO,OAAvB;AAA+B;;AAC1C;AAAS;AALb;AAQH;;AAGD,UAAQI,SAAR;AAEI,SAAK,QAAL;AAAeH,MAAAA,MAAM,GAAI,GAAED,MAAO,IAAnB;AAAuB;;AACtC,SAAK,KAAL;AAAeC,MAAAA,MAAM,GAAI,GAAED,MAAO,GAAnB;AAAsB;;AACrC,SAAK,MAAL;AAAeC,MAAAA,MAAM,GAAI,GAAED,MAAO,MAAnB;AAAyB;;AACxC,SAAK,IAAL;AAAeC,MAAAA,MAAM,GAAI,IAAV;AAAc;;AAC7B,SAAK,KAAL;AAAeA,MAAAA,MAAM,GAAI,GAAED,MAAO,IAAnB;AAAuB;;AACtC,SAAK,WAAL;AAAkBC,MAAAA,MAAM,GAAI,GAAED,MAAO,GAAnB;AAAsB;;AACxC,SAAK,SAAL;AAAgBC,MAAAA,MAAM,GAAI,GAAED,MAAO,QAAnB;AAA2B;;AAC3C,SAAK,UAAL;AAAiB;;AACjB,SAAK,KAAL;AAAYC,MAAAA,MAAM,GAAI,GAAED,MAAO,OAAnB;AAA0B;;AACtC,SAAK,QAAL;AAAe;;AACf,SAAK,QAAL;AAAe;;AACf;AAAS;AAbb;;AAgBJ,SAAOC,MAAP;AAEC,CA7CD;;AA+CA,eAAeJ,SAAf","sourcesContent":["const operation=(input,type,number)=>{\n    let toEval = \"\"\n    console.log(\"input\", input)\n    console.log(\"type\",type)\n    console.log(\"number\", number)\n\n    const whichType = type\n\n    if(type === \"geo\"){\n        switch(input){\n            case \"sin\" : toEval = `sin(${number} deg)`; break;\n            case \"cos\" : toEval = `cos(${number} deg)`; break;\n            case \"tan\" : toEval = `tan(${number} deg)`; break;\n            default: break;\n        }\n    }else if(type === \"operator\"){\n        switch(input){\n            case \"/\" : toEval = `sin(${number} deg)`; break;\n            case \"*\" : toEval = `cos(${number} deg)`; break;\n            case \"-\" : toEval = `tan(${number} deg)`; break;\n            case \"+\" : toEval = `tan(${number} deg)`; break;\n            default: break;\n        }\n\n    }\n\n\n    switch (whichType){\n\n        case \"square\": toEval = `${number}^2`;break;\n        case \"pow\":    toEval = `${number}^`;break;\n        case \"sqrt\":   toEval = `${number}^1/2`;break;\n        case \"pi\":     toEval = `pi`;break;\n        case \"exp\":    toEval = `${number}*(`;break;\n        case \"factorial\": toEval = `${number}!`;break;\n        case \"percent\": toEval = `${number}*1/100`;break;\n        case \"allClear\": break;\n        case \"neg\": toEval = `${number}*(-1)`;break;\n        case \"delete\": break;\n        case \"result\": break;\n        default: break;     \n\n    }\nreturn toEval\n\n}\n\nexport default operation"]},"metadata":{},"sourceType":"module"}