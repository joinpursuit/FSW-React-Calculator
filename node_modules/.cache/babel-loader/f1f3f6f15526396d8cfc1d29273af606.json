{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/App.js\";\nimport 'css-doodle';\nimport './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation';\nimport Calculator from './components/Calculator';\nimport { Decimal } from 'decimal.js';\nimport operation from './helpers/operation'; // import formatter from './helpers/formatter'\n\nimport data from './helpers/data';\nimport { create, all } from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.input = e => {\n      const [input, type] = e.target.value.split(',');\n\n      if (type === \"number\") {\n        this.setState({\n          //numbers : this.state.numbers.concat(input),\n          number: this.state.number.concat(input),\n          display: this.state.number.concat(input)\n        });\n      } else {\n        const evaluate = this.state.evaluate + this.state.display.concat(` ${input} `);\n        const prevEva = [this.state.display, input];\n        const whichOperation = operation(input, type); // const result = math(evaluate)\n        // console.log(result)\n\n        this.setState({\n          display: this.state.display.concat(` ${input} `),\n          numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n          prevNum: this.state.number,\n          prevEva: [this.state.display, input],\n          evaluate: evaluate,\n          number: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      display: \"\",\n      number: \"\",\n      evaluate: \"\",\n      numbers: [],\n      result: 0,\n      prevNum: \"\",\n      prevEva: [],\n      prevRes: 0\n    };\n  }\n\n  render() {\n    const buttons = data;\n    const numbers = this.state.numbers;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n        buttons: buttons,\n        numbers: numbers,\n        input: this.input,\n        operation: this.operation,\n        display: this.state.display,\n        number: this.state.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/App.js"],"names":["React","Navigation","Calculator","Decimal","operation","data","create","all","config","math","App","Component","constructor","props","input","e","type","target","value","split","setState","number","state","concat","display","evaluate","prevEva","whichOperation","numbers","parseFloat","prevNum","result","prevRes","render","buttons"],"mappings":"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","sourcesContent":["import 'css-doodle'\nimport './App.css'\nimport React from 'react'\nimport Navigation from './components/Navigation'\nimport Calculator from './components/Calculator'\nimport {Decimal} from 'decimal.js'\nimport operation from './helpers/operation'\n// import formatter from './helpers/formatter'\n\nimport data from './helpers/data'\nimport { create, all } from 'mathjs'\n\nconst config = { }\nconst math = create(all, config)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: \"\",\n      number:\"\",\n      evaluate: \"\",\n      numbers:[],\n      result: 0,\n      prevNum: \"\",\n      prevEva: [],\n      prevRes: 0\n    }\n\n  }\n  \n  input =(e)=>{\n    const [input,type] = e.target.value.split(',')\n    if(type === \"number\"){\n        this.setState({\n          //numbers : this.state.numbers.concat(input),\n          number: this.state.number.concat(input),\n          display: this.state.number.concat(input)\n        })\n\n    }else{\n      const evaluate = this.state.evaluate + this.state.display.concat(` ${input} `)\n      const prevEva = [this.state.display,input]\n      const whichOperation = operation(input,type)\n      // const result = math(evaluate)\n      // console.log(result)\n      this.setState({\n        display: this.state.display.concat(` ${input} `),\n        numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n        prevNum: this.state.number,\n        prevEva: [this.state.display,input],\n        evaluate: evaluate,\n        number: \"\"\n      })\n    }   \n  }\n  \n\n  render() {\n    const buttons = data\n    const numbers = this.state.numbers\n    return (\n      <>\n      <Navigation />\n      <Calculator \n        buttons={buttons} \n        numbers={numbers} \n        input={this.input} \n        operation={this.operation} \n        display={this.state.display} \n        number={this.state.number}\n        />\n    </>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}