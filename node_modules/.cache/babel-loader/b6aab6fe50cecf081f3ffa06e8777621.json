{"ast":null,"code":"const operation = (input, type, number, prevEva) => {\n  let toEval = [];\n  const whichType = type;\n\n  if (type === \"geo\") {\n    switch (input) {\n      case \"sin\":\n        toEval[0] = `sin(${number} deg)`;\n        toEval[1] = true;\n        break;\n\n      case \"cos\":\n        toEval[0] = `cos(${number} deg)`;\n        toEval[1] = true;\n        break;\n\n      case \"tan\":\n        toEval[0] = `tan(${number} deg)`;\n        toEval[1] = true;\n        break;\n\n      default:\n        break;\n    }\n  } else if (type === \"operator\") {\n    console.log(number);\n\n    switch (input) {\n      case \"/\":\n        toEval[0] = `${number} /`;\n        toEval[1] = false;\n        break;\n\n      case \"*\":\n        toEval[0] = `${number} *`;\n        toEval[1] = false;\n        break;\n\n      case \"-\":\n        toEval[0] = `${number} -`;\n        toEval[1] = false;\n        break;\n\n      case \"+\":\n        toEval[0] = `${number} +`;\n        toEval[1] = false;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  switch (whichType) {\n    case \"square\":\n      toEval[0] = `${number}^2`;\n      toEval[1] = true;\n      break;\n\n    case \"pow\":\n      toEval[0] = `${number}^`;\n      toEval[1] = false;\n      break;\n\n    case \"sqrt\":\n      toEval[0] = `${number}^1/2`;\n      toEval[1] = true;\n      break;\n\n    case \"pi\":\n      toEval[0] = `pi`;\n      toEval[1] = true;\n      break;\n\n    case \"exp\":\n      toEval[0] = `${number}*(`;\n      toEval[1] = false;\n      break;\n\n    case \"factorial\":\n      toEval[0] = `${number}!`;\n      toEval[1] = true;\n      break;\n\n    case \"percent\":\n      toEval[0] = `${number}*1/100`;\n      toEval[1] = true;\n      break;\n\n    case \"allClear\":\n      break;\n\n    case \"neg\":\n      toEval[0] = `${number}*(-1)`;\n      toEval[1] = true;\n      break;\n\n    case \"delete\":\n      break;\n\n    case \"result\":\n      toEval[0] = `${prevEva}`;\n      toEval[1] = true;\n      break;\n\n    default:\n      break;\n  }\n\n  console.log(toEval);\n  return toEval;\n};\n\nexport default operation;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/operation.js"],"names":["operation","input","type","number","prevEva","toEval","whichType","console","log"],"mappings":"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","sourcesContent":["const operation=(input,type,number,prevEva)=>{\n    let toEval = []\n    const whichType = type\n\n\n    if(type === \"geo\"){\n        switch(input){\n            case \"sin\" : toEval[0] = `sin(${number} deg)`;\n                         toEval[1] = true ;\n                         break;\n            case \"cos\" : toEval[0] = `cos(${number} deg)`;\n                         toEval[1] = true ;\n                         break;\n            case \"tan\" : toEval[0] = `tan(${number} deg)`;\n                         toEval[1] = true ;\n                         break;\n            default: break;\n        }\n    }else if(type === \"operator\"){\n        console.log(number)\n        switch(input){\n            case \"/\" :  toEval[0] = `${number} /`;\n                        toEval[1] = false ;\n                        break;\n            case \"*\" :  toEval[0] = `${number} *`;\n                        toEval[1] = false ;\n                        break;\n            case \"-\" :  toEval[0] = `${number} -`;\n                        toEval[1] = false ;\n                        break;\n            case \"+\" :  toEval[0] = `${number} +`;\n                        toEval[1] = false ;\n                        break;\n            default: break;\n        }\n\n    }\n\n\n    switch (whichType){\n\n        case \"square\": toEval[0] = `${number}^2`;\n                       toEval[1] = true ;\n                       break;\n\n        case \"pow\":    toEval[0] = `${number}^`;\n                       toEval[1] = false ;\n                       break;\n\n        case \"sqrt\":   toEval[0] = `${number}^1/2`; \n                       toEval[1] = true ;\n                       break;\n\n        case \"pi\":     toEval[0] = `pi`;\n                       toEval[1] = true ;\n                       break;\n\n        case \"exp\":    toEval[0] = `${number}*(`;\n                       toEval[1] = false ;\n                       break;\n\n        case \"factorial\": toEval[0] = `${number}!`;\n                          toEval[1] = true ;\n                          break;\n\n        case \"percent\": toEval[0] = `${number}*1/100`;\n                        toEval[1] = true ;\n                        break;\n\n        case \"allClear\": break;\n\n        case \"neg\":     toEval[0] = `${number}*(-1)`;\n                        toEval[1] = true ;\n                        break;\n\n        case \"delete\": break;\n\n        case \"result\": toEval[0] = `${prevEva}`;\n                       toEval[1] = true ;\n                       break;\n        default: break;     \n\n    }\nconsole.log(toEval)\nreturn toEval\n\n}\n\nexport default operation"]},"metadata":{},"sourceType":"module"}