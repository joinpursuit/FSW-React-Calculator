{"ast":null,"code":"const operation = (input, type, number, prevEva, prevRes, prevNum) => {\n  let casePi = prevRes === \"\" ? number : prevRes; // let casePi = (prevNum ===\"\") ? number : prevNum\n\n  let lastOperation = [];\n  let toEval = [];\n  let len = 0;\n  const whichType = type;\n  console.log('This is operation prevRes');\n  console.log(prevRes);\n\n  if (prevRes != \"\" || type === \"delete\") {\n    lastOperation = prevEva.split(' ');\n    len = lastOperation.length;\n    console.log(\"LAST OPERATION\");\n    console.log(lastOperation);\n  }\n\n  if (number === \"\" && prevNum === \"\" && prevRes === \"\") {\n    toEval = [input, false, false];\n    return toEval;\n  }\n\n  if (type === \"geo\") {\n    switch (input) {\n      case \"sin\":\n        toEval[0] = `sin(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        break;\n\n      case \"cos\":\n        toEval[0] = `cos(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        break;\n\n      case \"tan\":\n        toEval[0] = `tan(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        break;\n\n      default:\n        break;\n    }\n  } else if (type === \"operator\") {\n    console.log(number);\n\n    switch (input) {\n      case \"/\":\n        toEval[0] = `${number} /`;\n        toEval[1] = false;\n        toEval[2] = false;\n        break;\n\n      case \"*\":\n        toEval[0] = `${number} *`;\n        toEval[1] = false;\n        toEval[2] = false;\n        break;\n\n      case \"-\":\n        toEval[0] = `${number} -`;\n        toEval[1] = false;\n        toEval[2] = false;\n        break;\n\n      case \"+\":\n        toEval[0] = `${number} +`;\n        toEval[1] = false;\n        toEval[2] = false;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  switch (whichType) {\n    case \"square\":\n      toEval[0] = number === \"\" ? `${prevRes}^2` : `${number}^2`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"pow\":\n      toEval[0] = `${number}^`;\n      toEval[1] = false;\n      toEval[2] = false;\n      break;\n\n    case \"sqrt\":\n      toEval[0] = number === \"\" ? `${prevRes}^(1/2)` : `${number}^(1/2)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"pi\":\n      toEval[0] = number === \"\" ? `pi` : `${casePi}*pi`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"exp\":\n      toEval[0] = `${number}*(`;\n      toEval[1] = false;\n      toEval[2] = false;\n      break;\n\n    case \"factorial\":\n      toEval[0] = number === \"\" ? `${prevRes}!` : `${number}!`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"percent\":\n      toEval[0] = number === \"\" ? `${prevRes}*(1/100)` : `${number}*(1/100)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"allClear\":\n      break;\n\n    case \"neg\":\n      toEval[0] = number === \"\" ? `${prevRes}*(-1)` : `${number}*(-1)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      break;\n\n    case \"delete\":\n      toEval[1] = true;\n      toEval[2] = true;\n      break;\n\n    case \"result\":\n      if (prevRes != \"\") {\n        toEval[0] = `${prevRes} ${lastOperation[len - 2]} ${lastOperation[len - 1]}`;\n        toEval[1] = true;\n        toEval[2] = false;\n        break;\n      } else {\n        toEval[0] = `${prevEva}`;\n        toEval[1] = true;\n        toEval[2] = false;\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  console.log(toEval);\n  return toEval;\n};\n\nexport default operation;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/operation.js"],"names":["operation","input","type","number","prevEva","prevRes","prevNum","casePi","lastOperation","toEval","len","whichType","console","log","split","length"],"mappings":"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","sourcesContent":["const operation=(input,type,number,prevEva, prevRes, prevNum)=>{\n    \n    let casePi = (prevRes ===\"\") ? number : prevRes\n    // let casePi = (prevNum ===\"\") ? number : prevNum\n\n    let lastOperation = []\n    let toEval = []\n    let len = 0\n    const whichType = type\n    \n\n    console.log('This is operation prevRes')\n    console.log(prevRes)\n\n    if(prevRes != \"\" || type === \"delete\"){\n        lastOperation = prevEva.split(' ')\n        len = lastOperation.length\n        console.log(\"LAST OPERATION\")\n        console.log(lastOperation)\n    }\n\n    if(number === \"\" && prevNum === \"\" && prevRes === \"\"){\n        toEval = [input,false,false]\n        return toEval\n    }\n\n    if(type === \"geo\"){\n        switch(input){\n            case \"sin\" : toEval[0] = `sin(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         break;\n            case \"cos\" : toEval[0] = `cos(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         break;\n            case \"tan\" : toEval[0] = `tan(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         break;\n            default: break;\n        }\n    }else if(type === \"operator\"){\n        console.log(number)\n        switch(input){\n            case \"/\" :  toEval[0] = `${number} /`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        break;\n            case \"*\" :  toEval[0] = `${number} *`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        break;\n            case \"-\" :  toEval[0] = `${number} -`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        break;\n            case \"+\" :  toEval[0] = `${number} +`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        break;\n            default: break;\n        }\n\n    }\n\n\n    switch (whichType){\n\n        case \"square\": toEval[0] = (number === \"\") ? `${prevRes}^2` : `${number}^2`;\n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       break;\n\n        case \"pow\":    toEval[0] = `${number}^`;\n                       toEval[1] = false ;\n                       toEval[2] = false ;\n                       break;\n\n        case \"sqrt\":   toEval[0] = (number === \"\") ? `${prevRes}^(1/2)` : `${number}^(1/2)`; \n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       break;\n\n        case \"pi\":     toEval[0] = (number === \"\") ? `pi`: `${casePi}*pi`;\n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       break;\n\n        case \"exp\":    toEval[0] = `${number}*(`;\n                       toEval[1] = false ;\n                       toEval[2] = false ;\n                       break;\n\n        case \"factorial\": toEval[0] = (number === \"\") ? `${prevRes}!` :  `${number}!`;\n                          toEval[1] = true ;\n                          toEval[2] = false ;\n                          break;\n\n        case \"percent\": toEval[0] = (number === \"\") ? `${prevRes}*(1/100)` :  `${number}*(1/100)`;\n                        toEval[1] = true ;\n                        toEval[2] = false ;\n                        break;\n\n        case \"allClear\": break;\n\n        case \"neg\":     toEval[0] = (number === \"\") ? `${prevRes}*(-1)` :  `${number}*(-1)`;\n                        toEval[1] = true ;\n                        toEval[2] = false ;\n                        break;\n\n        case \"delete\":  toEval[1] = true ;\n                        toEval[2] = true ;\n                        break;\n\n        case \"result\": \n                        if(prevRes != \"\"){\n                            toEval[0] = `${prevRes} ${lastOperation[len-2]} ${lastOperation[len-1]}`\n                            toEval[1] = true ;\n                            toEval[2] = false ;\n                            break;\n                        }else{\n                            toEval[0] = `${prevEva}`;\n                            toEval[1] = true ;\n                            toEval[2] = false ;\n                            break;\n                        }\n                      \n        default: break;     \n\n    }\nconsole.log(toEval)\nreturn toEval\n\n}\n\nexport default operation"]},"metadata":{},"sourceType":"module"}