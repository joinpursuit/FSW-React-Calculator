{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/components/Display.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display(props) {\n  const {\n    display,\n    evaluate,\n    number,\n    result,\n    deleted\n  } = props;\n  let formatted,\n      formattedInfix = \"\";\n  console.log('NUMBER DISPLAY COMPONENT');\n  console.log(number);\n  let infix = deleted ? display : evaluate;\n  console.log(\"INFIX DISPLAY COM\");\n  console.log(infix.toLocaleString());\n  formattedInfix = isNaN(parseFloat(infix)) ? 0 : parseFloat(infix).toLocaleString('', {\n    minimumIntegerDigits: 21,\n    minimumFractionDigits: 10\n  });\n  console.log(\"FORMATTED INFIX DISPLAY COM\");\n  console.log(formattedInfix);\n\n  if (result != \"\" && display === result) {\n    formatted = parseFloat(result).toLocaleString();\n    console.log(`FORMATTED : ${formatted}`);\n  } else {\n    formatted = isNaN(parseFloat(number)) ? 0 : parseFloat(number).toLocaleString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display glass\",\n    children: [formatted, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview\",\n      children: isNaN(parseFloat(formattedInfix)) ? evaluate : formattedInfix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/components/Display.js"],"names":["React","Display","props","display","evaluate","number","result","deleted","formatted","formattedInfix","console","log","infix","toLocaleString","isNaN","parseFloat","minimumIntegerDigits","minimumFractionDigits"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,MAA7B;AAAqCC,IAAAA;AAArC,MAAiDL,KAAvD;AACA,MAAIM,SAAJ;AAAA,MAAeC,cAAc,GAAG,EAAhC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,MAAIO,KAAK,GAAIL,OAAD,GAAYJ,OAAZ,GAAsBC,QAAlC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,cAAN,EAAZ;AAEAJ,EAAAA,cAAc,GAAIK,KAAK,CAACC,UAAU,CAACH,KAAD,CAAX,CAAN,GAA6B,CAA7B,GAAiCG,UAAU,CAACH,KAAD,CAAV,CAAkBC,cAAlB,CAAiC,EAAjC,EAAqC;AAAEG,IAAAA,oBAAoB,EAAE,EAAxB;AAA4BC,IAAAA,qBAAqB,EAAE;AAAnD,GAArC,CAAlD;AAEAP,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;;AAEE,MAAGH,MAAM,IAAG,EAAT,IAAeH,OAAO,KAAGG,MAA5B,EAAmC;AACjCE,IAAAA,SAAS,GAAGO,UAAU,CAACT,MAAD,CAAV,CAAmBO,cAAnB,EAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAcH,SAAU,EAArC;AAED,GAJD,MAIK;AAEHA,IAAAA,SAAS,GAAIM,KAAK,CAACC,UAAU,CAACV,MAAD,CAAX,CAAN,GAA8B,CAA9B,GAAkCU,UAAU,CAACV,MAAD,CAAV,CAAmBQ,cAAnB,EAA9C;AAED;;AAEH,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,eACGL,SADH,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA2BM,KAAK,CAACC,UAAU,CAACN,cAAD,CAAX,CAAN,GAAsCL,QAAtC,GAAiDK;AAA3E;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KA9BQR,O;AAgCT,eAAeA,OAAf","sourcesContent":["import React from 'react'\n\nfunction Display (props) {\n  const { display, evaluate, number, result, deleted } = props\n  let formatted, formattedInfix = \"\"\n  console.log('NUMBER DISPLAY COMPONENT')\n  console.log(number)\n  let infix = (deleted) ? display : evaluate;\n  console.log(\"INFIX DISPLAY COM\")\n  console.log(infix.toLocaleString())\n\n  formattedInfix = (isNaN(parseFloat(infix))) ? 0 : parseFloat(infix).toLocaleString('', { minimumIntegerDigits: 21, minimumFractionDigits :10 })\n\n  console.log(\"FORMATTED INFIX DISPLAY COM\")\n  console.log(formattedInfix)\n\n    if(result !=\"\" && display===result){\n      formatted = parseFloat(result).toLocaleString()\n      console.log(`FORMATTED : ${formatted}`)\n\n    }else{\n\n      formatted = (isNaN(parseFloat(number))) ? 0 : parseFloat(number).toLocaleString()\n      \n    }\n \n  return (\n    <div className='display glass'>\n      {formatted}\n      <div className='preview'>{(isNaN(parseFloat(formattedInfix))) ? evaluate : formattedInfix }</div>\n    </div>\n  )\n}\n\nexport default Display\n"]},"metadata":{},"sourceType":"module"}