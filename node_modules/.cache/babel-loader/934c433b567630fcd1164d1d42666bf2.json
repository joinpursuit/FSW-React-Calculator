{"ast":null,"code":"const formatter = (numbers, format) => {\n  const numbers_ = numbers;\n  console.log(\"numbers_ ::\");\n  console.log(numbers_);\n  const len = numbers.length;\n  console.log(\"numbers_ len :\");\n  console.log(len);\n\n  if (len >= 21 && format === false) {\n    return numbers_.toLocaleString();\n  }\n\n  console.log(\"LETS FORMATT NUMBER OR RESULT LEN :\", len);\n\n  if (numbers_ === \"Infinity\" || numbers_ === \"-Infinity\") {\n    console.log(parseFloat(numbers_).toLocaleString());\n    return parseFloat(numbers_).toLocaleString();\n  }\n\n  const div = Math.floor(len / 3);\n  const mod = len % 3;\n  let display = '';\n\n  switch (div) {\n    case 0:\n      display = numbers_;\n      break;\n\n    case 1:\n      switch (mod) {\n        case 0:\n          display = numbers_;\n          break;\n\n        case 1:\n          display = numbers_.substring(0, 1) + ',' + numbers_.substring(1, len);\n          break;\n\n        case 2:\n          display = numbers_.substring(0, mod) + ',' + numbers_.substring(mod, len);\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    case 2:\n      switch (mod) {\n        case 0:\n          display = numbers_.substring(0, 3) + ',' + numbers_.substring(3, len);\n          break;\n\n        case 1:\n          display = numbers_.substring(0, 1) + ',' + numbers_.substring(1, 4) + ',' + numbers_.substring(4, len);\n          break;\n\n        case 2:\n          display = numbers_.substring(0, 2) + ',' + numbers_.substring(2, 5) + ',' + numbers_.substring(5, len);\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    case 3:\n      switch (mod) {\n        case 0:\n          display = numbers_.substring(0, 3) + ',' + numbers_.substring(3, 6) + ',' + numbers_.substring(6, len);\n          break;\n\n        case 1:\n          display = numbers_.substring(0, 1) + ',' + numbers_.substring(1, 4) + ',' + numbers_.substring(4, 7) + ',' + numbers_.substring(7, len);\n          break;\n\n        case 2:\n          display = numbers_.substring(0, 2) + ',' + numbers_.substring(2, 5) + ',' + numbers_.substring(5, 8) + ',' + numbers_.substring(8, len);\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    case 4:\n      switch (mod) {\n        case 0:\n          display = numbers_.substring(0, 3) + ',' + numbers_.substring(3, 6) + ',' + numbers_.substring(6, 9) + ',' + numbers_.substring(9, len);\n          break;\n\n        case 1:\n          display = numbers_.substring(0, 1) + ',' + numbers_.substring(1, 4) + ',' + numbers_.substring(4, 7) + ',' + numbers_.substring(7, 10) + ',' + numbers_.substring(10, len);\n          break;\n\n        case 2:\n          display = numbers_.substring(0, 2) + ',' + numbers_.substring(2, 5) + ',' + numbers_.substring(5, 8) + ',' + numbers_.substring(8, 11) + ',' + numbers_.substring(11, len);\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    case 5:\n      switch (mod) {\n        case 0:\n          display = numbers_.substring(0, 3) + ',' + numbers_.substring(3, 6) + ',' + numbers_.substring(6, 9) + ',' + numbers_.substring(9, 12) + ',' + numbers_.substring(12, len);\n          break;\n\n        case 1:\n          display = numbers_.substring(0, 1) + ',' + numbers_.substring(1, 4) + ',' + numbers_.substring(4, 7) + ',' + numbers_.substring(7, 10) + ',' + numbers_.substring(10, 13) + ',' + numbers_.substring(13, len);\n          break;\n\n        case 2:\n          display = numbers_.substring(0, 2) + ',' + numbers_.substring(2, 5) + ',' + numbers_.substring(5, 8) + ',' + numbers_.substring(8, 11) + ',' + numbers_.substring(11, 14) + ',' + numbers_.substring(14, len);\n          break;\n\n        default:\n          break;\n      }\n\n      break;\n\n    case 6:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 7:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 8:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 9:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 10:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 11:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 12:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 13:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 14:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    case 15:\n      display = numbers_.substring(0, 1) + '.' + numbers_.substring(1, 3) + 'e' + len;\n      break;\n\n    default:\n      break;\n  }\n\n  return display;\n};\n\nexport default formatter;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/formatter.js"],"names":["formatter","numbers","format","numbers_","console","log","len","length","toLocaleString","parseFloat","div","Math","floor","mod","display","substring"],"mappings":"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","sourcesContent":["\n\nconst formatter =(numbers,format)=>{\n\n\n    const numbers_ = numbers\n    console.log(\"numbers_ ::\")\n    console.log(numbers_)\n    const len = numbers.length\n\n    console.log(\"numbers_ len :\")\n    console.log(len)\n\n\n    if(len >= 21 && format === false) {\n        return numbers_.toLocaleString()\n    }\n\n    console.log(\"LETS FORMATT NUMBER OR RESULT LEN :\", len)\n    if(numbers_ === \"Infinity\" || numbers_ === \"-Infinity\"){\n        console.log(parseFloat(numbers_).toLocaleString())\n        return parseFloat(numbers_).toLocaleString()\n    }\n    \n    const div = Math.floor(len / 3)\n    const mod = len % 3\n    let display = ''   \n\n\n    switch(div){\n        case 0 : \n                    display = numbers_;break;\n                  \n        \n        case 1 : switch(mod){\n                    case 0 : display  = numbers_;break;\n                    case 1 : display  = numbers_.substring(0,1)+','+ numbers_.substring(1,len);break;\n                    case 2 : display  = numbers_.substring(0,mod)+','+ numbers_.substring(mod,len);break; \n                    default : break;\n                    }break;\n                 \n                 \n        case 2 : \n                 switch(mod){\n                    case 0 : display  = numbers_.substring(0,3)+','+ numbers_.substring(3,len);break;\n                    case 1 : display  = numbers_.substring(0,1)+','+ numbers_.substring(1,4)+','+ numbers_.substring(4,len);break;\n                    case 2 : display  = numbers_.substring(0,2)+','+ numbers_.substring(2,5)+','+ numbers_.substring(5,len);break; \n                    default : break;\n                }break;\n        case 3 : \n                switch(mod){\n                   case 0 : display  = numbers_.substring(0,3)+','+ numbers_.substring(3,6)+','+ numbers_.substring(6,len);break;\n                   case 1 : display  = numbers_.substring(0,1)+','+ numbers_.substring(1,4)+','+ numbers_.substring(4,7)+','+ numbers_.substring(7,len);break; \n                   case 2 : display  = numbers_.substring(0,2)+','+ numbers_.substring(2,5)+','+ numbers_.substring(5,8)+','+ numbers_.substring(8,len);break; \n                   default : break;\n               }break;\n        case 4 : \n               switch(mod){\n                  case 0 : display  = numbers_.substring(0,3)+','+ numbers_.substring(3,6)+','+ numbers_.substring(6,9)+','+ numbers_.substring(9,len);break; \n                  case 1 : display  = numbers_.substring(0,1)+','+ numbers_.substring(1,4)+','+ numbers_.substring(4,7)+','+ numbers_.substring(7,10)+','+ numbers_.substring(10,len);break; \n                  case 2 : display  = numbers_.substring(0,2)+','+ numbers_.substring(2,5)+','+ numbers_.substring(5,8)+','+ numbers_.substring(8,11)+','+ numbers_.substring(11,len);break; \n                  default : break;\n              }break;\n        \n        case 5 : \n              switch(mod){\n                 case 0 : display  = numbers_.substring(0,3)+','+ numbers_.substring(3,6)+','+ numbers_.substring(6,9)+','+ numbers_.substring(9,12)+','+ numbers_.substring(12,len);break; \n                 case 1 : display  = numbers_.substring(0,1)+','+ numbers_.substring(1,4)+','+ numbers_.substring(4,7)+','+ numbers_.substring(7,10)+','+ numbers_.substring(10,13)+','+ numbers_.substring(13,len);break; \n                 case 2 : display  = numbers_.substring(0,2)+','+ numbers_.substring(2,5)+','+ numbers_.substring(5,8)+','+ numbers_.substring(8,11)+','+ numbers_.substring(11,14)+','+ numbers_.substring(14,len);break; \n                 default : break;\n             }break;\n\n        case 6 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 7 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 8 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 9 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 10 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break \n        case 11 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break \n        case 12 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 13 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 14 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break\n        case 15 : display = numbers_.substring(0,1)+'.'+ numbers_.substring(1,3)+'e'+len;break         \n        default: break;\n    }\n    return display\n}\n\n\nexport default formatter"]},"metadata":{},"sourceType":"module"}