{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/App.js\";\nimport 'css-doodle';\nimport './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation';\nimport Calculator from './components/Calculator'; // import formatter from './helpers/formatter'\n\nimport data from './helpers/data';\nimport { create, all } from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.input = e => {\n      const input = e.target.value.split(',');\n      console.log(input); // this.setState({\n      //   display: this.state.display.concat(input)\n      // })\n    };\n\n    this.operation = type => {\n      console.log(type);\n    };\n\n    this.state = {\n      display: [],\n      evaluate: [],\n      numbers: [],\n      result: 0,\n      prevNums: [],\n      prevRes: 0\n    };\n  }\n\n  render() {\n    const buttons = data;\n    const numbers = this.state.numbers;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n        buttons: buttons,\n        numbers: numbers,\n        input: this.input,\n        operation: this.operation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/App.js"],"names":["React","Navigation","Calculator","data","create","all","config","math","App","Component","constructor","props","input","e","target","value","split","console","log","operation","type","state","display","evaluate","numbers","result","prevNums","prevRes","render","buttons"],"mappings":";AAAA,OAAO,YAAP;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,QAA5B;;;AAEA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,IAAI,GAAGH,MAAM,CAACC,GAAD,EAAMC,MAAN,CAAnB;;AAEA,MAAME,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAalBC,KAbkB,GAaVC,CAAD,IAAK;AACV,YAAMD,KAAK,GAAGC,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,KAAf,CAAqB,GAArB,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAFU,CAGV;AACA;AACA;AACD,KAnBiB;;AAAA,SAqBlBO,SArBkB,GAqBPC,IAAD,IAAQ;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACD,KAvBiB;;AAEhB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,OAAO,EAAC,EAHG;AAIXC,MAAAA,MAAM,EAAE,CAJG;AAKXC,MAAAA,QAAQ,EAAE,EALC;AAMXC,MAAAA,OAAO,EAAE;AANE,KAAb;AASD;;AAeDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG1B,IAAhB;AACA,UAAMqB,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACA,wBACE;AAAA,8BACA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEK,OAArB;AAA8B,QAAA,OAAO,EAAEL,OAAvC;AAAgD,QAAA,KAAK,EAAE,KAAKZ,KAA5D;AAAmE,QAAA,SAAS,EAAE,KAAKO;AAAnF;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADF;AAMD;;AApC+B;;AAuClC,eAAeX,GAAf","sourcesContent":["import 'css-doodle'\nimport './App.css'\nimport React from 'react'\nimport Navigation from './components/Navigation'\nimport Calculator from './components/Calculator'\n// import formatter from './helpers/formatter'\n\nimport data from './helpers/data'\nimport { create, all } from 'mathjs'\n\nconst config = { }\nconst math = create(all, config)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: [],\n      evaluate: [],\n      numbers:[],\n      result: 0,\n      prevNums: [],\n      prevRes: 0\n    }\n\n  }\n  \n  input =(e)=>{\n    const input = e.target.value.split(',')\n    console.log(input)\n    // this.setState({\n    //   display: this.state.display.concat(input)\n    // })\n  }\n\n  operation=(type)=>{\n    console.log(type)\n  }\n  \n\n  render() {\n    const buttons = data\n    const numbers = this.state.numbers\n    return (\n      <>\n      <Navigation />\n      <Calculator buttons={buttons} numbers={numbers} input={this.input} operation={this.operation}/>\n    </>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}