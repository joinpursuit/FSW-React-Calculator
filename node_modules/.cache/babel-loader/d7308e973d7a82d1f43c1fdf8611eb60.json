{"ast":null,"code":"const resolver = className => {\n  switch (className.includes) {\n    case 'result':\n      {\n        const doMath = math.evaluate(this.state.evaluate.join('').trim());\n        const numArray = String(doMath).split('').map(doMath => {\n          return Number(doMath);\n        });\n        this.setState({\n          numbers: [formatter(numArray)],\n          evaluate: [...this.state.evaluate, ' = ', doMath]\n        });\n        break;\n      }\n\n    case 'AC':\n      {\n        this.setState({\n          display: [],\n          evaluate: [],\n          numbers: [],\n          result: 0\n        });\n        break;\n      }\n\n    default:\n      {\n        this.setState({\n          numbers: [],\n          evaluate: [...this.state.evaluate, ' ', value, ' ']\n        });\n        break;\n      }\n  }\n};\n\nexport default resolver;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOSITORIES PINNED/Calculator/src/helpers/resolver.js"],"names":["resolver","className","includes","doMath","math","evaluate","state","join","trim","numArray","String","split","map","Number","setState","numbers","formatter","display","result","value"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,SAAD,IAAc;AAE1B,UAAOA,SAAS,CAACC,QAAjB;AAEI,SAAK,QAAL;AAAe;AACC,cAAMC,MAAM,GAAGC,IAAI,CAACC,QAAL,CAAc,KAAKC,KAAL,CAAWD,QAAX,CAAoBE,IAApB,CAAyB,EAAzB,EAA6BC,IAA7B,EAAd,CAAf;AACA,cAAMC,QAAQ,GAAGC,MAAM,CAACP,MAAD,CAAN,CAAeQ,KAAf,CAAqB,EAArB,EAAyBC,GAAzB,CAA8BT,MAAD,IAAU;AAAC,iBAAOU,MAAM,CAACV,MAAD,CAAb;AAAsB,SAA9D,CAAjB;AACA,aAAKW,QAAL,CAAc;AACVC,UAAAA,OAAO,EAAC,CAACC,SAAS,CAACP,QAAD,CAAV,CADE;AAEVJ,UAAAA,QAAQ,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,QAAf,EAAwB,KAAxB,EAA8BF,MAA9B;AAFC,SAAd;AAIA;AACC;;AACjB,SAAK,IAAL;AAAY;AACI,aAAKW,QAAL,CAAc;AACVG,UAAAA,OAAO,EAAE,EADC;AAEVZ,UAAAA,QAAQ,EAAE,EAFA;AAGVU,UAAAA,OAAO,EAAC,EAHE;AAIVG,UAAAA,MAAM,EAAE;AAJE,SAAd;AAMA;AACH;;AACb;AAAY;AACI,aAAKJ,QAAL,CAAc;AACdC,UAAAA,OAAO,EAAC,EADM;AAEdV,UAAAA,QAAQ,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,QAAf,EAAwB,GAAxB,EAA4Bc,KAA5B,EAAkC,GAAlC;AAFK,SAAd;AAIA;AACH;AA1BjB;AA6BH,CA/BD;;AAiCA,eAAenB,QAAf","sourcesContent":["const resolver =(className) =>{\n\n    switch(className.includes){\n\n        case 'result': {\n                        const doMath = math.evaluate(this.state.evaluate.join('').trim());\n                        const numArray = String(doMath).split('').map((doMath)=>{return Number(doMath)});\n                        this.setState({\n                            numbers:[formatter(numArray)],\n                            evaluate:[...this.state.evaluate,' = ',doMath]\n                            });\n                        break;\n                        }\n        case 'AC' : {\n                        this.setState({\n                            display: [],\n                            evaluate: [],\n                            numbers:[],\n                            result: 0 \n                        });\n                        break;\n                    } \n        default :   {\n                        this.setState({\n                        numbers:[],\n                        evaluate:[...this.state.evaluate,' ',value,' ']\n                        });\n                        break;\n                    }       \n    }\n\n}\n\nexport default resolver"]},"metadata":{},"sourceType":"module"}