{"ast":null,"code":"const operation = (input, type, number) => {\n  let toEval = [];\n  const whichType = type;\n\n  if (type === \"geo\") {\n    switch (input) {\n      case \"sin\":\n        toEval[0] = `sin(${number} deg)`;\n        break;\n\n      case \"cos\":\n        toEval[0] = `cos(${number} deg)`;\n        break;\n\n      case \"tan\":\n        toEval[0] = `tan(${number} deg)`;\n        break;\n\n      default:\n        break;\n    }\n  } else if (type === \"operator\") {\n    console.log(number);\n\n    switch (input) {\n      case \"/\":\n        toEval[0] = `${number} /`;\n        toEval[1] = false;\n        break;\n\n      case \"*\":\n        toEval[0] = `${number} *`;\n        break;\n\n      case \"-\":\n        toEval[0] = `${number} -`;\n        break;\n\n      case \"+\":\n        toEval[0] = `${number} +`;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  switch (whichType) {\n    case \"square\":\n      toEval[0] = `${number}^2`;\n      break;\n\n    case \"pow\":\n      toEval[0] = `${number}^`;\n      break;\n\n    case \"sqrt\":\n      toEval[0] = `${number}^1/2`;\n      break;\n\n    case \"pi\":\n      toEval[0] = `pi`;\n      break;\n\n    case \"exp\":\n      toEval[0] = `${number}*(`;\n      break;\n\n    case \"factorial\":\n      toEval[0] = `${number}!`;\n      break;\n\n    case \"percent\":\n      toEval[0] = `${number}*1/100`;\n      break;\n\n    case \"allClear\":\n      break;\n\n    case \"neg\":\n      toEval[0] = `${number}*(-1)`;\n      break;\n\n    case \"delete\":\n      break;\n\n    case \"result\":\n      break;\n\n    default:\n      break;\n  }\n\n  console.log(toEval);\n  return toEval;\n};\n\nexport default operation;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/operation.js"],"names":["operation","input","type","number","toEval","whichType","console","log"],"mappings":"AAAA,MAAMA,SAAS,GAAC,CAACC,KAAD,EAAOC,IAAP,EAAYC,MAAZ,KAAqB;AACjC,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,SAAS,GAAGH,IAAlB;;AAGA,MAAGA,IAAI,KAAK,KAAZ,EAAkB;AACd,YAAOD,KAAP;AACI,WAAK,KAAL;AAAaG,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,OAAMD,MAAO,OAA1B;AAAkC;;AAC/C,WAAK,KAAL;AAAaC,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,OAAMD,MAAO,OAA1B;AAAkC;;AAC/C,WAAK,KAAL;AAAaC,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,OAAMD,MAAO,OAA1B;AAAkC;;AAC/C;AAAS;AAJb;AAMH,GAPD,MAOM,IAAGD,IAAI,KAAK,UAAZ,EAAuB;AACzBI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,YAAOF,KAAP;AACI,WAAK,GAAL;AAAYG,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AACAC,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAZ;AACA;;AACZ,WAAK,GAAL;AAAWA,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AAA2B;;AACtC,WAAK,GAAL;AAAWC,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AAA2B;;AACtC,WAAK,GAAL;AAAWC,QAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AAA2B;;AACtC;AAAS;AAPb;AAUH;;AAGD,UAAQE,SAAR;AAEI,SAAK,QAAL;AAAeD,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AAA0B;;AACzC,SAAK,KAAL;AAAeC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,GAAtB;AAAyB;;AACxC,SAAK,MAAL;AAAeC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,MAAtB;AAA4B;;AAC3C,SAAK,IAAL;AAAeC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,IAAb;AAAiB;;AAChC,SAAK,KAAL;AAAeA,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,IAAtB;AAA0B;;AACzC,SAAK,WAAL;AAAkBC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,GAAtB;AAAyB;;AAC3C,SAAK,SAAL;AAAgBC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,QAAtB;AAA8B;;AAC9C,SAAK,UAAL;AAAiB;;AACjB,SAAK,KAAL;AAAYC,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAa,GAAED,MAAO,OAAtB;AAA6B;;AACzC,SAAK,QAAL;AAAe;;AACf,SAAK,QAAL;AAAe;;AACf;AAAS;AAbb;;AAgBJG,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAOA,MAAP;AAEC,CA9CD;;AAgDA,eAAeJ,SAAf","sourcesContent":["const operation=(input,type,number)=>{\n    let toEval = []\n    const whichType = type\n\n\n    if(type === \"geo\"){\n        switch(input){\n            case \"sin\" : toEval[0] = `sin(${number} deg)`; break;\n            case \"cos\" : toEval[0] = `cos(${number} deg)`; break;\n            case \"tan\" : toEval[0] = `tan(${number} deg)`; break;\n            default: break;\n        }\n    }else if(type === \"operator\"){\n        console.log(number)\n        switch(input){\n            case \"/\" :  toEval[0] = `${number} /`;\n                        toEval[1] = false ;\n                        break;\n            case \"*\" : toEval[0] = `${number} *`; break;\n            case \"-\" : toEval[0] = `${number} -`; break;\n            case \"+\" : toEval[0] = `${number} +`; break;\n            default: break;\n        }\n\n    }\n\n\n    switch (whichType){\n\n        case \"square\": toEval[0] = `${number}^2`;break;\n        case \"pow\":    toEval[0] = `${number}^`;break;\n        case \"sqrt\":   toEval[0] = `${number}^1/2`;break;\n        case \"pi\":     toEval[0] = `pi`;break;\n        case \"exp\":    toEval[0] = `${number}*(`;break;\n        case \"factorial\": toEval[0] = `${number}!`;break;\n        case \"percent\": toEval[0] = `${number}*1/100`;break;\n        case \"allClear\": break;\n        case \"neg\": toEval[0] = `${number}*(-1)`;break;\n        case \"delete\": break;\n        case \"result\": break;\n        default: break;     \n\n    }\nconsole.log(toEval)\nreturn toEval\n\n}\n\nexport default operation"]},"metadata":{},"sourceType":"module"}