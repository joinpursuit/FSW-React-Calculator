{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/GITHUB/REPOS/Calculator/src/App.js\";\nimport 'css-doodle';\nimport './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation';\nimport Calculator from './components/Calculator';\nimport { Decimal } from 'decimal.js';\nimport operation from './helpers/operation';\nimport { ToastContainer, toast } from \"react-toastify\"; // import formatter from './helpers/formatter'\n\nimport data from './helpers/data';\nimport { create, all } from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = {};\nconst math = create(all, config);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.input = e => {\n      const [input, type] = e.target.value.split(',');\n      let result = 0;\n      let expression = [0, false];\n\n      if (type === \"number\") {\n        this.setState({\n          //numbers : this.state.numbers.concat(input),\n          number: this.state.number.concat(input),\n          display: this.state.number.concat(input),\n          evaluate: this.state.prevEva.concat(input),\n          prevEva: this.state.evaluate.concat(input)\n        });\n      } else {\n        const evaluate = this.state.prevEva.concat(` ${input} `);\n        console.log(\"EVALUATE\", evaluate);\n        const number = this.state.number || this.state.prevRes;\n        const prevEva = this.state.prevEva;\n        const prevRes = this.state.prevRes;\n        const prevNum = this.state.prevNum;\n        console.log(\"NUMBER\", number);\n        expression = operation(input, type, number, prevEva, prevRes, prevNum);\n\n        if (!expression[1]) {\n          this.setState({\n            display: this.state.display.concat(` ${input} `),\n            numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n            prevNum: this.state.number,\n            prevEva: evaluate,\n            evaluate: evaluate,\n            number: \"\"\n          });\n        } else {\n          console.log('expression is complete, lets evaluate');\n\n          try {\n            result = math.evaluate(expression[0]);\n            console.log(\"result\", result);\n          } catch {\n            toast.error(`Typo Error: ${this.state.evaluate}`);\n          }\n\n          this.setState({\n            display: result.toString(),\n            numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n            prevNum: this.state.number,\n            prevEva: expression[0],\n            evaluate: expression[0],\n            number: \"\",\n            prevRes: result.toString(),\n            result: result.toString()\n          });\n        }\n      }\n    };\n\n    this.state = {\n      display: \"\",\n      number: \"\",\n      evaluate: \"\",\n      numbers: [],\n      result: \"\",\n      prevNum: \"\",\n      prevEva: \"\",\n      prevRes: \"\"\n    };\n  }\n\n  render() {\n    const buttons = data; // const numbers = this.state.numbers\n    // const evaluate = this.state.evaluate\n\n    const {\n      display,\n      evaluate,\n      number,\n      numbers,\n      prevEva,\n      prevNum,\n      prevRes,\n      result\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n        buttons: buttons,\n        numbers: numbers,\n        input: this.input,\n        operation: this.operation,\n        display: display,\n        evaluate: evaluate,\n        number: number,\n        numbers: numbers,\n        prevEva: prevEva,\n        prevNum: prevNum,\n        prevRes: prevRes,\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/App.js"],"names":["React","Navigation","Calculator","Decimal","operation","ToastContainer","toast","data","create","all","config","math","App","Component","constructor","props","input","e","type","target","value","split","result","expression","setState","number","state","concat","display","evaluate","prevEva","console","log","prevRes","prevNum","numbers","parseFloat","error","toString","render","buttons"],"mappings":"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","sourcesContent":["import 'css-doodle'\nimport './App.css'\nimport React from 'react'\nimport Navigation from './components/Navigation'\nimport Calculator from './components/Calculator'\nimport {Decimal} from 'decimal.js'\nimport operation from './helpers/operation'\nimport { ToastContainer,toast } from \"react-toastify\";\n// import formatter from './helpers/formatter'\n\nimport data from './helpers/data'\nimport { create, all } from 'mathjs'\n\nconst config = { }\nconst math = create(all, config)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: \"\",\n      number:\"\",\n      evaluate: \"\",\n      numbers:[],\n      result: \"\",\n      prevNum: \"\",\n      prevEva: \"\",\n      prevRes: \"\"\n    }\n\n  }\n  \n  input =(e)=>{\n    const [input,type] = e.target.value.split(',')\n    let result = 0\n    let expression = [0,false]\n\n    if(type === \"number\"){\n        this.setState({\n          //numbers : this.state.numbers.concat(input),\n          number: this.state.number.concat(input),\n          display: this.state.number.concat(input),\n          evaluate: this.state.prevEva.concat(input),\n          prevEva: this.state.evaluate.concat(input)\n        })\n\n    }else{\n      const evaluate = this.state.prevEva.concat(` ${input} `)\n      console.log(\"EVALUATE\", evaluate)\n      const number = this.state.number || this.state.prevRes\n      const prevEva = this.state.prevEva\n      const prevRes =this.state.prevRes\n      const prevNum = this.state.prevNum\n      console.log(\"NUMBER\", number)\n      expression = operation(input,type,number,prevEva,prevRes,prevNum);\n\n     if (!expression[1]){\n      this.setState({\n        display: this.state.display.concat(` ${input} `),\n        numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n        prevNum: this.state.number,\n        prevEva: evaluate,\n        evaluate: evaluate,\n        number: \"\"\n      })\n     }else{\n      console.log('expression is complete, lets evaluate')\n      try{\n        result = math.evaluate(expression[0])\n        console.log(\"result\", result)\n      }catch{\n        toast.error(`Typo Error: ${this.state.evaluate}`)\n      }\n\n      \n      this.setState({\n        display: result.toString(),\n        numbers: this.state.numbers.concat(parseFloat(this.state.number)),\n        prevNum: this.state.number,\n        prevEva: expression[0],\n        evaluate: expression[0],\n        number: \"\",\n        prevRes: result.toString(),\n        result: result.toString()\n\n      })\n\n\n     }\n\n    }   \n  }\n  \n\n  render() {\n    const buttons = data\n    // const numbers = this.state.numbers\n    // const evaluate = this.state.evaluate\n    const {display, evaluate, number , numbers, prevEva, prevNum, prevRes, result} = this.state\n    return (\n      <>\n      <Navigation />\n      <Calculator \n        buttons={buttons} \n        numbers={numbers} \n        input={this.input} \n        operation={this.operation} \n        display={display}\n        evaluate={evaluate}\n        number={number}\n        numbers={numbers}\n        prevEva={prevEva}\n        prevNum={prevNum}\n        prevRes={prevRes}\n        result={result}\n        />\n        <ToastContainer />\n    </>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}