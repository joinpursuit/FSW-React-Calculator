{"ast":null,"code":"const operation = (input, type, number, prevEva, prevRes, prevNum) => {\n  let casePi = prevRes === \"\" ? number : prevRes;\n  let casePrevRes = prevRes === \"\" && number === \"\" ? \"0\" : prevRes; // let casePrevEva = prevEva.split('').filter(ele => ele != \" \")\n  // console.log(casePrevEva)\n  // let casePi = (prevNum ===\"\") ? number : prevNum\n\n  let lastOperation = [];\n  let toEval = [];\n  let len = 0;\n  const whichType = type;\n  console.log(`This is operation casePrevRes: ${casePrevRes}`);\n  console.log(`Whictype: ${whichType}`);\n\n  if (prevRes != \"\" || type === \"delete\" || type === \"result\") {\n    lastOperation = prevEva.split('').filter(ele => ele != \" \");\n    len = lastOperation.length;\n    console.log(`LAST OPERATION: `);\n    console.log(`${lastOperation}`);\n  }\n\n  if (number === \"\" && prevNum === \"\" && casePrevRes === \"\" && type === \"result\") {\n    console.log('wtfff');\n  }\n\n  if (number === \"\" && prevNum === \"\" && casePrevRes === \"\") {\n    console.log('everything is empty');\n    toEval = [input, false, false, false];\n    console.log(toEval);\n    return toEval;\n  }\n\n  if (type === \"geo\") {\n    switch (input) {\n      case \"sin\":\n        toEval[0] = `sin(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      case \"cos\":\n        toEval[0] = `cos(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      case \"tan\":\n        toEval[0] = `tan(${number} deg)`;\n        toEval[1] = true;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      default:\n        break;\n    }\n  } else if (type === \"operator\") {\n    switch (input) {\n      case \"/\":\n        toEval[0] = `${number} /`;\n        toEval[1] = false;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      case \"*\":\n        toEval[0] = `${number} *`;\n        toEval[1] = false;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      case \"-\":\n        toEval[0] = `${number} -`;\n        toEval[1] = false;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      case \"+\":\n        toEval[0] = `${number} +`;\n        toEval[1] = false;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  switch (whichType) {\n    case \"square\":\n      toEval[0] = number === \"\" ? `${casePrevRes}^2` : `${number}^2`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"pow\":\n      toEval[0] = number === \"\" ? `${casePrevRes}` : `${number}^`;\n      toEval[1] = false;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"sqrt\":\n      toEval[0] = number === \"\" ? `${casePrevRes}^(1/2)` : `${number}^(1/2)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"pi\":\n      toEval[0] = number === \"\" ? `pi` : `${casePi}*pi`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"exp\":\n      toEval[0] = `${number}*(`;\n      toEval[1] = false;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"factorial\":\n      toEval[0] = number === \"\" ? `${casePrevRes}!` : `${number}!`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"percent\":\n      toEval[0] = number === \"\" ? `${casePrevRes}*(1/100)` : `${number}*(1/100)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"allClear\":\n      toEval[0] = \"\";\n      toEval[1] = false;\n      toEval[2] = false;\n      toEval[3] = true;\n      break;\n\n    case \"neg\":\n      toEval[0] = number === \"\" ? `${casePrevRes}*(-1)` : `${number}*(-1)`;\n      toEval[1] = true;\n      toEval[2] = false;\n      toEval[3] = false;\n      break;\n\n    case \"delete\":\n      toEval[0] = `${lastOperation.splice(0, len - 1).join(\" \")}`;\n      toEval[1] = false;\n      toEval[2] = true;\n      toEval[3] = false;\n      break;\n\n    case \"result\":\n      if (prevRes != \"\") {\n        toEval[0] = len === 2 ? `${lastOperation[len - 2]} ${lastOperation[len - 1]}` : `${prevRes} ${lastOperation[len - 2]} ${lastOperation[len - 1]}`;\n        toEval[1] = true;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n      } else {\n        toEval[0] = `${prevEva}`;\n        toEval[1] = true;\n        toEval[2] = false;\n        toEval[3] = false;\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  console.log(`toEval : `);\n  console.log(toEval);\n  return toEval;\n};\n\nexport default operation;","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/src/helpers/operation.js"],"names":["operation","input","type","number","prevEva","prevRes","prevNum","casePi","casePrevRes","lastOperation","toEval","len","whichType","console","log","split","filter","ele","length","splice","join"],"mappings":"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","sourcesContent":["const operation=(input,type,number,prevEva, prevRes, prevNum)=>{\n    \n    let casePi = (prevRes ===\"\") ? number : prevRes\n    let casePrevRes = (prevRes ===\"\" && number ===\"\") ? \"0\" : prevRes\n    // let casePrevEva = prevEva.split('').filter(ele => ele != \" \")\n    // console.log(casePrevEva)\n    // let casePi = (prevNum ===\"\") ? number : prevNum\n\n    let lastOperation = []\n    let toEval = []\n    let len = 0\n    const whichType = type\n    \n\n    console.log(`This is operation casePrevRes: ${casePrevRes}`)\n    console.log(`Whictype: ${whichType}`)\n\n    if(prevRes != \"\" || type === \"delete\" || type === \"result\"){\n        lastOperation = prevEva.split('').filter(ele => ele != \" \")\n        len = lastOperation.length\n        console.log(`LAST OPERATION: `)\n        console.log(`${lastOperation}`)\n    }\n\n    if(number === \"\" && prevNum === \"\" && casePrevRes === \"\" && type === \"result\"){\n      console.log('wtfff')\n    }\n\n    if(number === \"\" && prevNum === \"\" && casePrevRes === \"\"){\n        console.log('everything is empty')\n        toEval = [input,false,false,false]\n        console.log(toEval)\n        return toEval\n    }\n\n    \n\n\n    if(type === \"geo\"){\n        switch(input){\n            case \"sin\" : toEval[0] = `sin(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         toEval[3] = false;\n                         break;\n            case \"cos\" : toEval[0] = `cos(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         toEval[3] = false;\n                         break;\n            case \"tan\" : toEval[0] = `tan(${number} deg)`;\n                         toEval[1] = true ;\n                         toEval[2] = false ;\n                         toEval[3] = false;\n                         break;\n            default: break;\n        }\n    }else if(type === \"operator\"){\n\n        switch(input){\n            case \"/\" :  toEval[0] = `${number} /`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n            case \"*\" :  toEval[0] = `${number} *`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n            case \"-\" :  toEval[0] = `${number} -`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n            case \"+\" :  toEval[0] = `${number} +`;\n                        toEval[1] = false ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n            default: break;\n        }\n\n    }\n\n\n    switch (whichType){\n\n        case \"square\": toEval[0] = (number === \"\") ? `${casePrevRes}^2`: `${number}^2`;\n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       toEval[3] = false;\n                       break;\n\n        case \"pow\":    toEval[0] = (number === \"\") ? `${casePrevRes}` : `${number}^`;   \n                       toEval[1] = false ;   \n                       toEval[2] = false ;   \n                       toEval[3] = false;   \n                       break;\n\n\n        case \"sqrt\":   toEval[0] = (number === \"\") ? `${casePrevRes}^(1/2)` : `${number}^(1/2)`; \n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       toEval[3] = false;\n                       break;\n\n        case \"pi\":     toEval[0] = (number === \"\") ? `pi`: `${casePi}*pi`;\n                       toEval[1] = true ;\n                       toEval[2] = false ;\n                       toEval[3] = false;\n                       break;\n\n        case \"exp\":    toEval[0] = `${number}*(`;\n                       toEval[1] = false ;\n                       toEval[2] = false ;\n                       toEval[3] = false;\n                       break;\n\n        case \"factorial\": toEval[0] = (number === \"\") ? `${casePrevRes}!` :  `${number}!`;\n                          toEval[1] = true ;\n                          toEval[2] = false ;\n                          toEval[3] = false;\n                          break;\n\n        case \"percent\": toEval[0] = (number === \"\") ? `${casePrevRes}*(1/100)` :  `${number}*(1/100)`;\n                        toEval[1] = true ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n\n        case \"allClear\": toEval[0] = \"\";\n                         toEval[1] = false ;\n                         toEval[2] = false ;\n                         toEval[3] = true;\n                         break;\n\n        case \"neg\":     toEval[0] = (number === \"\") ? `${casePrevRes}*(-1)` :  `${number}*(-1)`;\n                        toEval[1] = true ;\n                        toEval[2] = false ;\n                        toEval[3] = false;\n                        break;\n\n        case \"delete\":  toEval[0] = `${lastOperation.splice(0,len-1).join(\" \")}`\n                        toEval[1] = false ;\n                        toEval[2] = true ;\n                        toEval[3] = false;\n                        break;\n\n        case \"result\": \n                        if(prevRes != \"\"){\n                            toEval[0] = (len === 2) ? `${lastOperation[len-2]} ${lastOperation[len-1]}` \n                                                    : `${prevRes} ${lastOperation[len-2]} ${lastOperation[len-1]}`\n                            toEval[1] = true ;\n                            toEval[2] = false ;\n                            toEval[3] = false;\n                            break;\n                        }else{\n                            toEval[0] = `${prevEva}`;\n                            toEval[1] = true ;\n                            toEval[2] = false ;\n                            toEval[3] = false;\n                            break;\n                        }\n                      \n        default: break;     \n\n    }\nconsole.log(`toEval : `)\nconsole.log(toEval)\nreturn toEval\n\n}\n\nexport default operation"]},"metadata":{},"sourceType":"module"}