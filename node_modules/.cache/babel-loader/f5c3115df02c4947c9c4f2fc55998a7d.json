{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createRange } from '../../function/matrix/range.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRangeTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n  var range = createRange({\n    typed: typed,\n    config: config,\n    matrix: matrix,\n    bignumber: bignumber,\n    smaller: smaller,\n    smallerEq: smallerEq,\n    larger: larger,\n    largerEq: largerEq\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/Users/macpro/GITHUB/REPOS/Calculator/node_modules/mathjs/lib/esm/expression/transform/range.transform.js"],"names":["factory","createRange","name","dependencies","createRangeTransform","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","range","any","args","lastIndex","length","last","push","apply","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,YAA/B,EAA6C,SAA7C,EAAwD,WAAxD,EAAqE,QAArE,EAA+E,UAA/E,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAACE,IAAD,EAAU;AAAA,MAEnFC,KAFmF,GAUjFD,IAViF,CAEnFC,KAFmF;AAAA,MAGnFC,MAHmF,GAUjFF,IAViF,CAGnFE,MAHmF;AAAA,MAInFC,MAJmF,GAUjFH,IAViF,CAInFG,MAJmF;AAAA,MAKnFC,SALmF,GAUjFJ,IAViF,CAKnFI,SALmF;AAAA,MAMnFC,OANmF,GAUjFL,IAViF,CAMnFK,OANmF;AAAA,MAOnFC,SAPmF,GAUjFN,IAViF,CAOnFM,SAPmF;AAAA,MAQnFC,MARmF,GAUjFP,IAViF,CAQnFO,MARmF;AAAA,MASnFC,QATmF,GAUjFR,IAViF,CASnFQ,QATmF;AAWrF,MAAIC,KAAK,GAAGb,WAAW,CAAC;AACtBK,IAAAA,KAAK,EAALA,KADsB;AAEtBC,IAAAA,MAAM,EAANA,MAFsB;AAGtBC,IAAAA,MAAM,EAANA,MAHsB;AAItBC,IAAAA,SAAS,EAATA,SAJsB;AAKtBC,IAAAA,OAAO,EAAPA,OALsB;AAMtBC,IAAAA,SAAS,EAATA,SANsB;AAOtBC,IAAAA,MAAM,EAANA,MAPsB;AAQtBC,IAAAA,QAAQ,EAARA;AARsB,GAAD,CAAvB;AAUA;AACF;AACA;AACA;AACA;AACA;;AAEE,SAAOP,KAAK,CAAC,OAAD,EAAU;AACpB,cAAU,SAASS,GAAT,CAAaC,IAAb,EAAmB;AAC3B,UAAIC,SAAS,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA9B;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACC,SAAD,CAAf;;AAEA,UAAI,OAAOE,IAAP,KAAgB,SAApB,EAA+B;AAC7B;AACAH,QAAAA,IAAI,CAACI,IAAL,CAAU,IAAV;AACD;;AAED,aAAON,KAAK,CAACO,KAAN,CAAY,IAAZ,EAAkBL,IAAlB,CAAP;AACD;AAXmB,GAAV,CAAZ;AAaD,CAzCuD,EAyCrD;AACDM,EAAAA,mBAAmB,EAAE;AADpB,CAzCqD,CAAjD","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createRange } from '../../function/matrix/range.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRangeTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  } = _ref;\n  var range = createRange({\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}